2019-09-05

The http2 proxy code seems to be completely functional, but as of now
there is no way to request a client certs after TLS session is
established with http2.

HTTP/2 is based solely on TLS 1.3.  Session renegotiation was dropped
in TLS 1.3.  TLS 1.3 has an extension for post-handshake
authentication, but it's not implemented in nodejs today.

qv https://lists.w3.org/Archives/Public/ietf-http-wg/2019AprJun/0001.html

Alternatively, there is a draft RFC for "secondary certs" as part of
http/2, but that doesn't seem to be implemented yet either.

qv https://tools.ietf.org/html/draft-ietf-httpbis-http2-secondary-certs-04

Since neither node http2 nor browsers implement http2 secondary certs
at this time (nor post-handshake authentication), "reactive client
certs" are only doable with TLS 1.2  (sadface)

(Update: 2019-09-09 -having a lot of trouble getting it to work in TLS 1.2.)


2019-04-17

The proxy-table code - which I salvaged from very old versions of
node-htttp-proxy - needs refactoring.  There's multiple code paths
that are never used in yxorp, and the path rewriting code needs to be
tested and rethought.  It's working for the moment. 

2019-04-06

The *actual* problem was that http/2 requests don't have a 'host'
header.  Instead they have an 'authority:' pseudo-header.  As such,
when http2 requests came in, they were proxied to http1.1 and the
'host' header was not being copied across.  The lack of this 'host'
header caused wordpress-apache2 to generate bogus redirects.  Once I
added code to re-add the 'host' header, it seems to work. 


2019-04-05

The problem with the HTTP2 code is actually a problem with
internal-redirects.  Wordpress is generating redirects based on the
incoming requests, which are to the internal address and thus are 'wrong'.

I.e.:

1. the browser connects to risacher.org and requests risacher.org/blog.
2. yxorp-http2 routes this to http://127.0.0.1:7777/jfdi/
3. wordpress redirects that to https://127.0.0.1/jfdi/, and yxorp-http2 attempts to follow it internally. 
4. yxorp-http2 gets its own request to https://127.0.0.1:443/jfdi/ and it either fails to route it or routes it to the wrong place.

I don't know why the old yxorp.js doesn't fall into the same trap or the
reverse one: is wordpress generating the same redirects?  How are they
not a problem?


2019-02-16
I should really implement wildcard/default routes.


2018-12-10

PKI renegotiation is broken - maybe just in http-spdy?

In trying to fix PKI renegotiation, I tried to move risacher.org to
yxorp-spdy, but I also upgraded to Nodejs 10.14, which breaks spdy,
which is "effectively unmaintained" - and "req.handle.writev is not a
function" errors

q.v. https://github.com/addaleax/webpack-dev-server/commit/d141150e437833aff778ab70efa1df9bd1b72724

when I rolled back to yxorp.js (from yxorp-spdy.js) PKI renegotiation came back.


2017-11-04

I should really put all my projects in github.  Have I done this already?
I think yxorp is on github, but I should start a branch for the renegotiation work.

And I don't think I've pushed the code recently.

Also: it would be good to be able to simulate a DoD PKI cert
(soft-cert from self-signed CA) for developing on machines without smartcard.

2017-08-28

Renegotiation woes:
              https://github.com/nodejs/node/issues/2259

https://github.com/nodejitsu/node-http-proxy/pull/737

The problem with doing the renegotiation inside the proxyRes handler
is that the we are proxying the result to the client *during* the
renegotiation, as the below trace from openssl s_client
shows. Apparently the renegotiate() call is asynchronous.

 GET /3002/pki/
 
 SSL_connect:SSL renegotiate ciphers
 SSL_connect:SSLv3 write client hello A
 SSL_connect:error in SSLv3 read server hello A
 HTTP/1.1 302 Found
 location: https://risacher.org/blog/
 date: Mon, 28 Aug 2017 11:57:26 GMT
 connection: close
 transfer-encoding: chunked

20SSL_connect:error in SSLv3 read server hello A


Below link has an example of modifying the html stream, which I think
maybe I could adapt to handle a 496 response - it rebinds the
res.writeHead() &c. methods, which maybe could be replaced with
versions that would wait for the renegotiation to complete. 

https://github.com/nodejitsu/node-http-proxy/issues/796


2016-12-07
# WHY DOES THE DOWNLOAD NOT HAVE ALL THE BLEEDING CAs?!?

wget http://dodpki.c3pki.chamb.disa.mil/rel3_dodroot_2048.cac
openssl pkcs7 -inform DER -in rel3_dodroot_2048.cac -print_certs

This page has the list of tools:
http://iase.disa.mil/pki-pke/pages/tools.aspx

Which includes the zip file of the latest certs:
http://iasecontent.disa.mil/pki-pke/Certificates_PKCS7_v5.0u1_DoD.zip


2016-11-30 

nodejs does not yet support http/2 in core.  There is a third-party
module (molnarg/node-http2) that implements most of the https API, but
it's different enough that node-web-proxy can't use it.

I've starred most of the threads on github that talk about adding
http/2 support, and when it lands in core, then I should try again and
ping the node-web-proxy devs if necessary.

2016-06-07

proxy.on('proxyRes', function (proxyRes, req, res) {
    console.log('RAW Response from the target', JSON.stringify(proxyRes.statusCode, true, 2));
});

